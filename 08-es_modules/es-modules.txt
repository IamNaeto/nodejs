CommonJs
- With CommonJs each file is treated as a module
    * This means that variables, functions, classes, etc are not accessible to other files by default.
    * This means that you have to explicitly tell the module system which parts of your code should be exported via module.exports or exports.
    * To import a code into a file, use the require() function.
    * Although CommonJs works perfectly fine, a new module system have been added to nodejs and that is ES Modules.

ES Modules
- At the time node.js was created, there was no built-in modules system in JavaScipt
- Node.js defaulted to CommonJs as its module system
- As of ES2015, Javascript does have a standardized module system as part of the language itself
- That module system is called EcmaScript Modules or ES Modules or ESM for short
- Notable thing aboule ES Modules is that
    * The file extension is .mjs and not .js

- Patterns of ES Modules Exports
    * Defauklt export: Export default function/variable name, all in a separte name
    * Having export default in line with the arrow function
    * Exporting more than one function or variable as object using export default {}
    * Named export using export const variable name

- ES Modules Imports
    * Importing we use import variable name from "./filename.mjs"
    * It is allowed to refer to the exported function any name while importing it
    * While importing a named export, the exported name is maintained without changing it

ES Module Summary
- ES Module is the ECMAScript standard for modules
- It was introduced with ES2015
- Node.js 14 and above support ES Modules
- Instead of module.exports, we use the export keyword
- The export can be default or named
- We import the exported variables or function using the import keyword
- If it is a default export, we can assign any name while importing it
- If it is a named export, the import name must be the same
